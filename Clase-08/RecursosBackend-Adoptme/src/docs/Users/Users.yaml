paths:
  /api/users:
    get:
      summary: Obtiene todos los usuarios
      tags:
        - Users
      responses:
        '200':
          description: Los usuarios fueron obtenidos satisfactoriamente de la base de datos.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Error interno del servidor, usualmente generado por una query 
  /api/users/{id}:
    get:
      summary: Obtiene un solo usuario a partir de su Id
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Id del usuario que se desea solicitar.
      responses:
        '200':
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: Error interno del servidor...
    put:
      summary: Actualiza un usuario a partir de su Id
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Id del usuario que se desea solicitar.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/updateUser'
      responses:
        '200':
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: Error interno del servidor...
components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: Id autogenerado de mongo
        firstName:
          type: string
          description: Nombre del usuario
        lastName:
          type: string
          description: Apellido del usuario
        email:
          type: string
          description: Correo del usuario, este campo es único
        password:
          type: string
          description: Contraseña Hasheada del usuario.
      example:
        _id: "ObjectId('638bb233f7504b3dedc9387e')"
        firstName: "Mauricio"
        lastName: "Espinosa"
        email: "correo@correo.com"
        password: "$2b$08$jCZ01iEpSHamyLlx/Jbo.4ecU6rLoZu7WdPd5U0Bpjka"
  requestBodies:
    updateUser:
      content:
        application/json:
          schema:
            type: object
            properties:
              firstName:
                type: string
                description: Nombre del usuario
              lastName:
                type: string
                description: Apellido del usuario
              email:
                type: string
                description: Correo del usuario, este campo es único
              password:
                type: string
                description: Contraseña del usuario, posteriormente será hasheada
            example:
              firstName: "Carlos"
              lastName: "Godoy"
              email: "correo.nuevo@correo.com"
              password:  123